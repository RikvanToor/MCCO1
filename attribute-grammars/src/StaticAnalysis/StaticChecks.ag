{- Door:
 -
 - Rik van Toor    : 4239776
 - Martijn Fleuren : 5666163
 -
 - We hebben opgave H niet gemaakt.
 -}

imports {
import Utils.Similarity ( similar )
import Main.Args
import Syntax.UHA_Syntax
import Syntax.UHA_Utils
import Syntax.UHA_Range
import Types

--import Utils.StaticErrors
import Utils.Warnings
import Utils.Messages
import Data.List
import Utils.Utils

import qualified Data.Tree as T
import qualified Data.Map as M
import qualified Data.Set as S
import Data.Set  (Set)
import Data.Tree (Tree)
import Data.List (nub)

import ModuleSystem.ImportEnvironment
import Parser.OperatorTable
import Data.Char ( isUpper )

}

INCLUDE "UHA_Syntax.ag"

ATTR
  Module
  [ baseName              : String
    importEnvironments    : ImportEnvironments
  |
  | collectEnvironment    : ImportEnvironment
    errors                : Errors
    typeSignatures        : {[(Name,TpScheme)]}
    warnings              : Warnings
    hasshadowing          : Bool -- Shadowing attribuut voor
                                 -- wanneer er /ergens/ shadowing plaatsvindt
  ]

{- Hier wordt het attribuut voor het aantal bladeren @nrOfLeaves@ toegevoegd en
 - voor de let diepte @letDepth@.
 -
 - Relevante opgaven: A, B
 -}
ATTR
  Module Body Declarations Declaration Expressions Expression Patterns Pattern
  Statement Statements Qualifier Qualifiers Alternative Alternatives Constructor
  Constructors GuardedExpressions GuardedExpression FunctionBinding
  FunctionBindings LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
  Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems
  [
  |
  | nrOfLeaves USE {(+)} {1} : Int
    letDepth   USE {(+)} {0} : Int
  ]

{- Hier word het attribuut toegevoegd voor de keywords. Standaard is elke knoop
 - of elk blad /geen/ keyword. Alle keywords krijgen al waarde voor dit
 - attribuut ["<keyword_name>"]
 -
 - Relevante opgaven: C
 -}
ATTR
  Module Body Declarations Declaration Fixity Expressions Expression Patterns
  Pattern Statement Statements Qualifier Qualifiers Alternative Alternatives
  Constructor Constructors GuardedExpressions GuardedExpression FunctionBinding
  FunctionBindings LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
  Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems
  ImportDeclaration ImportDeclarations MaybeImportSpecification
  ImportSpecification
  [
  |
  | reservedWords USE {(++)}  {[]} : {[String]}
  ]

{- Het aantal lege classes kan berekend worden door het verschil te nemen tussen
 - de verzaleing klassen die is gedefinieerd en de verzameling klassen waarvoor
 - instanties zijn gedefinieerd:
 -
 - emptyClasses = definedClasses \ usedInstances
 -
 - Relevante opgaven: D
 -}
ATTR
  Module Body Declarations Declaration Statement Statements Qualifier Qualifiers
  Alternative Alternatives FunctionBinding FunctionBindings RightHandSide
  MaybeDeclarations
  [
  |
  | usedInstances USE {S.union} {S.empty} : {Set String}
    definedClasses USE {S.union} {S.empty} : {Set String}
  ]

-- Topniveau attribuut voor de berekening van het verschil van de attributen
-- hierboven.
ATTR
  Module
  [
  |
  | emptyClasses : {Set String}
  ]

-- Attribuut dat de naam van een simpel type vasthoudt. Later bleek deze
-- relevant voor meer dan alleen simpele ypes maar de naam 'stname' is gewoon
-- gebleven.
ATTR
  SimpleType Name
  [
  |
  | stname : String
  ]

{- Attribuut dat bijhoudt waar types worden gedefinieerd. De lijst is standaard
 - lengte 1, maar als een type meer dan eens wordt gedefinieerd dan is de lijst
 - langer en kunnen er fouten worden berekend.
 -
 - Relevante opgaven: E
 -}
{
type RuleNumber = Int
type Location   = (FilePath, RuleNumber)
}

ATTR
  Module Body Declarations Declaration Expressions Expression Patterns Pattern
  Statement Statements Qualifier Qualifiers Alternative Alternatives Constructor
  Constructors GuardedExpressions GuardedExpression FunctionBinding
  FunctionBindings LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
  Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems
  [
  |
  | typeDecls USE {(++)} {[]} : {[(String, [Location])]}
  ]

{-
 -
 -}
ATTR
  MaybeName
  [
  |
  | reservedWordsAs USE {(++)} {[]} : {[String]}
  ]

ATTR
  SimpleType
  [
  |
  | decls : {(String, [(String,Int)])}
  ]

{- Informatie over waar iets plaatsvind in de broncode (String is de filename en
 - Int is het regelnummer.
 -
 - Relevante opgaven: E, F
 -}
ATTR
  Range Position
  [
  |
  | info : {[(String,Int)]}
  ]

{- Environments voor verschillende takken in de AST.
 -
 - Relevante opgaven: F, G
 -}
ATTR
  Module Body Declarations Declaration Expressions Expression Patterns Pattern
  Statement Statements Qualifier Qualifiers Alternative Alternatives Constructor
  Constructors GuardedExpressions GuardedExpression FunctionBinding
  FunctionBindings LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
  Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems
  [
  |
  | variables USE {(++)} {[]} : {[Tree [String]]}
  ]

{------------------------------------------------------------------------------}
{-                                   Semantics                                -}
{------------------------------------------------------------------------------}

SEM Module
  | Module
    lhs.errors             = []
       .warnings           = []
       .typeSignatures     = []
       .collectEnvironment = head (@lhs.importEnvironments)
       .emptyClasses       = @body.definedClasses `S.difference` @body.usedInstances
       .reservedWords      = "module" : "where" : (@body.reservedWords)
       .typeDecls          = M.toList $ M.filter ((>1) . length) $ foldr (uncurry $ M.insertWith (++)) M.empty @body.typeDecls
       .hasshadowing       = any hasShadowing (concatMap T.subForest @body.variables)

SEM Declarations
  | Cons
    lhs.letDepth = max @hd.letDepth @tl.letDepth

SEM Expressions
  | Cons
    lhs.letDepth = max @hd.letDepth @tl.letDepth

SEM SimpleType
  | SimpleType
    lhs.stname = @name.stname

SEM Name
  | Identifier
    lhs.stname = @name
  | Operator
    lhs.stname = @name
  | Special
    lhs.stname = @name

SEM MaybeName
   | Nothing  lhs.reservedWordsAs = []
   | Just     lhs.reservedWordsAs = ["as"]

SEM ImportDeclaration
  | Import
    lhs.reservedWords = "import" : (if @qualified then ["qualified"] else []) ++ (@asname.reservedWordsAs) ++ @importspecification.reservedWords

SEM MaybeImportSpecification
  | Nothing lhs.reservedWords = []
  | Just    lhs.reservedWords = @importspecification.reservedWords

SEM ImportSpecification
  | Import lhs.reservedWords = if @hiding then ["hiding"] else []

SEM Declaration
  | Type
    lhs.reservedWords = "type" : (@type.reservedWords)
       .typeDecls = [@simpletype.decls]
  | Data
    lhs.reservedWords = "data" : (@context.reservedWords) ++ (@constructors.reservedWords)
  | Newtype
    lhs.reservedWords = "newtype" : (@context.reservedWords) ++ (@constructor.reservedWords) -- ++ (@derivings.reservedWordsDerivings)
  | Class
    lhs.reservedWords = "class" : (@context.reservedWords) ++ (@where.reservedWords)
       .nrOfLeaves     = 0
       .definedClasses = S.singleton (@simpletype.stname)
  | Instance
    lhs.reservedWords = "instance" : (@context.reservedWords) ++ (@types.reservedWords) ++ (@where.reservedWords)
       .nrOfLeaves = 0
       .usedInstances = S.singleton (@name.stname)
  | Hole
    lhs.reservedWords = ["_"]
  | Default
    lhs.reservedWords = "default" : @types.reservedWords

SEM Fixity
  | Infixl
    lhs.reservedWords = ["infixl"]
  | Infixr
    lhs.reservedWords = ["infixr"]
  | Infix
    lhs.reservedWords = ["infix"]

SEM MaybeDeclarations
  | Nothing
    lhs.reservedWords = []
  | Just
    lhs.reservedWords = "where" : (@declarations.reservedWords)

SEM Expression
  | Hole
    lhs.reservedWords = ["_"]
  | If
    lhs.reservedWords = "if" : @guardExpression.reservedWords ++ "then" : @thenExpression.reservedWords ++ "else" : @elseExpression.reservedWords
  | Case
    lhs.reservedWords = "case" : @expression.reservedWords ++ "of" : @alternatives.reservedWords
  | Do
    lhs.reservedWords = "do"   : @statements.reservedWords
  | Let
    lhs.letDepth = 1 + max @expression.letDepth @declarations.letDepth
       .reservedWords = "let"  : @declarations.reservedWords ++ "in" : @expression.reservedWords

SEM Position
  | Position
    lhs.info = [(@filename, @line)]
  | Unknown    lhs.info = []

SEM Range
  | Range
    lhs.info = @start.info

SEM SimpleType
  | SimpleType
    lhs.decls = (@name.stname, @range.info)

SEM FunctionBindings
  | Cons
    lhs.variables = nub (@hd.variables ++ @tl.variables)
  | Nil
    lhs.variables = []

SEM Pattern
  | Variable
    lhs.variables = [T.Node [@name.stname] []]

SEM FunctionBinding
  | FunctionBinding
    lhs.variables =
      case combineTrees @lefthandside.variables of
        []                -> [];
        ((T.Node x xs) : _) -> case xs of
                               []              -> [T.Node x @righthandside.variables];
                               ((T.Node y ys):_) -> [T.Node x [T.Node y (ys ++ @righthandside.variables)]]
SEM LeftHandSide
  | Function
    lhs.variables = [T.Node [@name.stname]  (combineTrees @patterns.variables) ]

{
combineTrees :: [Tree [a]] -> [Tree [a]]
combineTrees []  = []
combineTrees [r] = [r]
combineTrees ((T.Node hs1 ts1):(T.Node hs2 ts2):ts) =
  combineTrees $ (T.Node (hs1++hs2) (ts1++ts2)) : ts

hasShadowing :: Eq a => Tree [a] -> Bool
hasShadowing (T.Node a as) = (any hasShadowing as) || (any (`elem` (concatMap T.flatten as)) [a])
}

