
imports {
import Utils.Similarity ( similar )
import Main.Args
import Syntax.UHA_Syntax
import Syntax.UHA_Utils
import Syntax.UHA_Range
import Types

--import Utils.StaticErrors
import Utils.Warnings
import Utils.Messages
import Data.List
import Utils.Utils

import qualified Data.Map as M

import ModuleSystem.ImportEnvironment
import Parser.OperatorTable
import Parser.Lexer (keywords)
import Data.Char ( isUpper )

}

INCLUDE "UHA_Syntax.ag"

ATTR Module
   [ baseName              : String
     importEnvironments    : ImportEnvironments
   |
   | collectEnvironment    : ImportEnvironment
     errors                : Errors
     typeSignatures        : {[(Name,TpScheme)]}
     warnings              : Warnings
   ]

ATTR Module Body Declarations Declaration Expressions Expression Patterns Pattern
     Statement Statements Qualifier Qualifiers
     Alternative Alternatives Constructor Constructors
     GuardedExpressions GuardedExpression FunctionBinding FunctionBindings
     LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
     Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems [ | | nrOfLeaves USE {(+)} {1} : Int ]

SEM Module
   | Module     lhs.errors   = []
                   .warnings = []
                   .typeSignatures = []
                   .collectEnvironment = head (@lhs.importEnvironments)

SEM Declaration
  | Class     lhs.nrOfLeaves=0
  | Instance  lhs.nrOfLeaves=0

ATTR Module Body Declarations Declaration Fixity Expressions Expression Patterns Pattern
     Statement Statements Qualifier Qualifiers
     Alternative Alternatives Constructor Constructors
     GuardedExpressions GuardedExpression FunctionBinding FunctionBindings
     LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
     Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems ImportDeclaration [ | | reservedWords USE {(++)}  {[]} : {[String]} ]

SEM Module
   | Module   lhs.reservedWords = "module" : "where" : (@body.reservedWords)

ATTR MaybeName [ | | reservedWordsAs USE {(++)} {[]} : {[String]} ]

SEM MaybeName
   | Nothing  lhs.reservedWordsAs = []
   | Just     lhs.reservedWordsAs = ["as"]

SEM ImportDeclaration
   | Import   lhs.reservedWords = "import" : (if @qualified then ["qualified"] else []) ++ (@asname.reservedWordsAs) --TODO hiding

SEM Declaration
   | Type     lhs.reservedWords = "type" : (@type.reservedWords)
   | Data     lhs.reservedWords = "data" : (@context.reservedWords) ++ (@constructors.reservedWords) -- ++ (case @derivings of [] -> []; _ -> ["deriving"]) --TODO. Can't figure out how to pattern match on those lists. UUAGC docs are down atm.
   | Newtype  lhs.reservedWords = "newtype" : (@context.reservedWords) ++ (@constructor.reservedWords) -- ++ (@derivings.reservedWordsDerivings)
   | Class    lhs.reservedWords = "class" : (@context.reservedWords) ++ (@where.reservedWords)
   | Instance lhs.reservedWords = "instance" : (@context.reservedWords) ++ (@types.reservedWords) ++ (@where.reservedWords)
   | Hole     lhs.reservedWords = ["_"]
   | Default  lhs.reservedWords = "default" : @types.reservedWords

SEM Fixity
   | Infixl   lhs.reservedWords = ["infixl"]
   | Infixr   lhs.reservedWords = ["infixr"]
   | Infix    lhs.reservedWords = ["infix"]

SEM MaybeDeclarations
   | Nothing  lhs.reservedWords = []
   | Just     lhs.reservedWords = "where" : (@declarations.reservedWords)

SEM Expression
   | Hole     lhs.reservedWords = ["_"]
   | If       lhs.reservedWords = "if" : @guardExpression.reservedWords ++ "then" : @thenExpression.reservedWords ++ "else" : @elseExpression.reservedWords
   | Case     lhs.reservedWords = "case" : @expression.reservedWords ++ "of" : @alternatives.reservedWords
   | Do       lhs.reservedWords = "do" : @statements.reservedWords
   | Let      lhs.reservedWords = "let" : @declarations.reservedWords ++ "in" : @expression.reservedWords