{
import Data.Bifunctor
import Data.List
import Data.Monoid
}

data Program
  | Program   procs :: Procs
              stat  :: Stat
  deriving Program : Show

data Program'
  | Program'  procs :: Procs'
              stat  :: Stat'
  deriving Program' : Show


type Procs  = [ Proc  ]
type Procs' = [ Proc' ]
data Proc
  | Proc          name :: String  inp :: {[String]}  out :: String   stat :: Stat
  deriving Proc : Show

data Proc'
  | Proc'         labelEntry :: Label  labelReturn :: Label    name :: String  inp :: {[String]}  out :: String   stat :: Stat'
  deriving Proc' : Show

data Stat
  | Skip
  | IfThenElse    cond  :: {BExpr} stat1  :: Stat    stat2 :: Stat
  | While         cond  :: {BExpr} stat   :: Stat
  | Call          name  :: String  params :: {Exprs} out :: String
  | IAssign       name  :: String  val    :: {IExpr}
  | BAssign       name  :: String  val    :: {BExpr}
  | Seq           stat1 :: Stat    stat2  :: Stat
  | Malloc        name  :: String  size   :: {IExpr}
  | Free          ptr   :: {IExpr}
  | RefAssign     ptr   :: {IExpr} val    :: {IExpr}
  | Continue
  | Break
  deriving Stat : Show

data Stat'
  | Skip'          label     :: Label
  | IfThenElse'    labelc    :: Label   cond      :: BExpr   stat1  :: Stat'  stat2  :: Stat'
  | While'         labelc    :: Label   cond      :: BExpr   stat   :: Stat'
  | Call'          labelCall :: Label   labelExit :: Label     name   :: String params :: Exprs  out :: String
  | IAssign'       label     :: Label   name      :: String  val    :: IExpr
  | BAssign'       label     :: Label   name      :: String  val    :: BExpr
  | Seq'           stat1     :: Stat' stat2     :: Stat'
  | Malloc'        label     :: Label   name      :: String  size   :: IExpr
  | Free'          label     :: Label   ptr       :: IExpr
  | RefAssign'     label     :: Label   ptr       :: IExpr   val    :: IExpr
  | Continue'      label     :: Label
  | Break'         label     :: Label

data IExpr
  | IConst        val  :: Int
  | Var           name :: String
  | Plus          left :: IExpr  right :: IExpr
  | Minus         left :: IExpr  right :: IExpr
  | Times         left :: IExpr  right :: IExpr
  | Divide        left :: IExpr  right :: IExpr
  | Deref         ptr  :: IExpr
  deriving IExpr : Eq, Ord

data BExpr
  | BConst        val  :: Bool
  | BVar          name :: String
  | LessThan      left :: IExpr  right :: IExpr
  | GreaterThan   left :: IExpr  right :: IExpr
  | LessEqual     left :: IExpr  right :: IExpr
  | GreaterEqual  left :: IExpr  right :: IExpr
  | IEqual        left :: IExpr  right :: IExpr
  | BEqual        left :: BExpr  right :: BExpr
  | And           left :: BExpr  right :: BExpr
  | Or            left :: BExpr  right :: BExpr
  | Not           val  :: BExpr
  deriving BExpr : Eq, Ord

type Exprs  = [ Expr  ]
data Expr
  | B BExpr
  | I IExpr
  deriving Expr : Eq, Ord, Show

data Code
  | CBExpr   BExpr
  | CIExpr   IExpr
  | CStat    Stat'
  | CProc    Proc'
  | CProgram Program'

--------------------------------------------------------------------------------
-- Lelijke instances, maar ze maken het wel mooi in de output                 --
--------------------------------------------------------------------------------
{
instance Show Stat' where
  show s =
    case s of
      Skip' label ->
        "[skip]" ++ show label
      IfThenElse' labelc cond  stat1 stat2 ->
        "[if " ++ show cond ++ "] " ++ show labelc ++ "\n" ++
        indentblock (show stat1) ++ "\nelse\n" ++ indentblock (show stat2)
      While' labelc cond stat ->
        "[while " ++ show cond ++ "] " ++ show labelc ++ "\n" ++
        indentblock (show stat) ++ "\n"
      IAssign' label name val ->
        "[" ++ name ++ " = " ++ show val ++ "] " ++ show label
      BAssign' label name val ->
        "[" ++ name ++ " = " ++ show val ++ "] " ++ show label
      Seq' stat1 stat2 ->
        show stat1 ++ ";\n" ++ show stat2
      Malloc' label name size ->
        "[malloc(" ++ name ++ ", " ++ show size ++ ")] " ++ show label
      Free' label ptr ->
        "[free(" ++ show ptr ++ ")]" ++ show label
      RefAssign' label ptr val ->
        "[refassign(" ++ show ptr ++ ") = " ++ show val ++ "] " ++ show label
      Continue' label ->
        "[continue] " ++ show label
      Break' label ->
        "[break] " ++ show label
      Call' labelCall labelExit name params out ->
        ""

-- helper functie die vooraan elke regel twee spaties stopt.
indentblock :: String -> String
indentblock = init . unlines . fmap ("  "++) . lines

-- abstractie
infixop :: Show a => a -> String -> a -> String
infixop left inf right = show left ++ " " ++ inf ++ " " ++ show right

instance Show IExpr where
  show s =
    case s of
      IConst val        -> show val
      Var    name       -> name
      Plus   left right -> infixop left "+" right
      Minus  left right -> infixop left "-" right
      Times  left right -> infixop left "*" right
      Divide left right -> infixop left "/" right
      Deref  ptr        -> "dereference(" ++ show ptr ++ ")"

instance Show BExpr where
  show s =
    case s of
      BConst        val         -> show val
      BVar          name        -> name
      LessThan      left  right -> infixop left "<" right
      GreaterThan   left  right -> infixop left ">" right
      LessEqual     left  right -> infixop left "<=" right
      GreaterEqual  left  right -> infixop left ">=" right
      IEqual        left  right -> infixop left "==" right
      BEqual        left  right -> infixop left "==" right
      And           left  right -> infixop left "&&" right
      Or            left  right -> infixop left "||" right
      Not           val         -> "!(" ++ show val ++ ")"
}
--------------------------------------------------------------------------------
--                           2. Attribuutdeclaraties                          --
--------------------------------------------------------------------------------

{- label : Int
 -
 - Houdt de huidige beschikbare label-waarde. Dit betekent dus dat de georven
 - waarde altijd gebruikt kan worden, maar moet worden aangepast voordat deze
 - doorgegeven wordt aan de kinderen:
 -
 - vb.
 -
 -  Label 9 komt binnen
 -  Ik gebruik label 9 in een programmapunt
 -  De labelwaarde die ik door ga geven is 9 + 1 = 10.
 -
 - ---------------------------------------------------------------------------
 -
 - cfg : Graph
 -
 - 'Control flow graph' is een synthetisch attribuut op het hoogste niveau. Dit
 - kan triviaal gedaan worden met de verzameling kanten die de stroming
 - definieren: cfg : Set Edges -> Graph
 -
 -}
{
newtype Label = Label { getLabel :: Int } deriving (Eq, Ord)

instance Show Label where
  show (Label x) = concat ["\ESC[93m\ESC[1m", show x, "\ESC[0m"]
}

attr Procs Proc Stat
  chn label :: Label

attr Program
  syn transformed :: Program'

attr Proc Procs
  syn transformed use {(++)} {[]} :: Procs'

attr Stat
  syn transformed :: Stat'

attr BExpr IExpr
  syn copy :: self

{- Alleen de types die een accent-versie hebben krijgen het transformed
 - attribuut omdat daar labels aan verbonden moeten worden.
 -}

{
type Init   = Label
type Finals = [Label]

data Arc a
  = Intra { from_Intra :: a, to_Intra :: a }
  | Inter { from_Inter :: a, to_Inter :: a, placeHolder_Inter :: a, placeHolder_Inter2 :: a }
  deriving Eq

instance Show a => Show (Arc a) where
  show (Intra x y)     = show (x, y)
  show (Inter x y q w) = undefined -- voor nu

type Flow   = [Arc Label]

fromArc :: (a -> b) -> (a, a) -> (b, b)
fromArc f = bimap f f

reverseArc :: Arc a -> Arc a
reverseArc (Intra x y)     = Intra y x
reverseArc (Inter _ _ _ _) = undefined -- voor nu

type Block = Either Stat' (BExpr, Label)
}


attr Program'
  syn cfg    :: {[Arc Label]}
  syn rcfg   :: {[Arc Label]}
  syn init   :: Init
  syn finals :: Finals
  syn blocks :: {[Block]}

attr Stat'
  syn blocks        use {(++)} {[]} :: {[Block]}
  syn breakFinals   use {(++)} {[]} :: Finals
  syn continueInits use {(++)} {[]} :: Finals
  syn finals        use {(++)} {[]} :: Finals
  syn flow          use {(++)} {[]} :: Flow
  syn init                          :: Init

--------------------------------------------------------------------------------
--                                3. Semantiek                                --
--------------------------------------------------------------------------------

-- Transformatie van Program naar Program' (Toevoegen van labels)
sem Program
  | Program
    lhs.transformed = Program' @procs.transformed @stat.transformed
    procs.label     = Label 1
    stat.label      = @procs.label

sem Proc
  | Proc
    loc.entry :: uniqueref label
       .exit  :: uniqueref label
    lhs.transformed =
     [(Proc' @loc.entry @loc.exit @name @inp @out @stat.transformed)]

sem Stat
  | Skip IfThenElse While Call IAssign BAssign Seq Malloc Free RefAssign
    Continue Break
    loc.nextLabel :: uniqueref label

sem Stat
  | Skip       lhs.transformed = Skip'       @loc.nextLabel
  | While      lhs.transformed = While'      @loc.nextLabel @cond @stat.transformed
  | IAssign    lhs.transformed = IAssign'    @loc.nextLabel @name @val
  | BAssign    lhs.transformed = BAssign'    @loc.nextLabel @name @val
  | Malloc     lhs.transformed = Malloc'     @loc.nextLabel @name @size
  | Free       lhs.transformed = Free'       @loc.nextLabel @ptr
  | RefAssign  lhs.transformed = RefAssign'  @loc.nextLabel @ptr @val
  | Continue   lhs.transformed = Continue'   @loc.nextLabel
  | Break      lhs.transformed = Break'      @loc.nextLabel
  | IfThenElse lhs.transformed = IfThenElse' @loc.nextLabel
                                  @cond @stat1.transformed @stat2.transformed
  | Seq        lhs.transformed = Seq' @stat1.transformed @stat2.transformed
  | Call       loc.call   :: uniqueref label
                  .return :: uniqueref label
               lhs.transformed = Call'       @loc.call @loc.return @name @params @out

-- Init

sem Program'
  | Program' lhs.init   = @stat.init

sem Stat'
  | Skip'       lhs.init = @label
  | IfThenElse' lhs.init = @labelc
  | While'      lhs.init = @labelc
  | Call'       lhs.init = @labelCall
  | IAssign'    lhs.init = @label
  | BAssign'    lhs.init = @label
  | Seq'        lhs.init = @stat1.init
  | Malloc'     lhs.init = @label
  | Free'       lhs.init = @label
  | RefAssign'  lhs.init = @label
  | Continue'   lhs.init = @label
  | Break'      lhs.init = @label

-- Finals

sem Program'
  | Program'    lhs.finals      = @stat.finals

sem Stat'
  | Skip'       lhs.finals      = [@label]
  | IfThenElse' lhs.finals      = @stat1.finals ++ @stat2.finals
  | While'      lhs.finals      = @labelc : @stat.breakFinals
                   .breakFinals = []
  | Call'       lhs.finals      = [@labelExit]
  | IAssign'    lhs.finals      = [@label]
  | BAssign'    lhs.finals      = [@label]
  | Seq'        lhs.finals      = @stat2.finals
  | Malloc'     lhs.finals      = [@label]
  | Free'       lhs.finals      = [@label]
  | RefAssign'  lhs.finals      = [@label]
  | Continue'   lhs.finals      = []
  | Break'      lhs.finals      = []
                   .breakFinals = [@label]

-- (Reverse) Control Flow Graph

sem Program'
  | Program'
    loc.c      = @stat.flow
    lhs.cfg    = @loc.c
       .rcfg   = fmap reverseArc @loc.c

sem Stat'
  | IfThenElse' lhs.flow = @stat1.flow ++  @stat2.flow ++
                           [Intra @labelc @stat1.init] ++ [Intra @labelc @stat2.init]
  | While'      lhs.flow = let extra = [Intra x @labelc | x <- @stat.finals] ++
                                       [Intra x @labelc | x <- @stat.continueInits]
                           in concat [@stat.flow, [Intra @labelc @stat.init], extra]
                lhs.continueInits = []
  | Call'       lhs.flow = [] -- Alleen voor Interprocedural belangrijk
  | Seq'        lhs.flow = let extra = [Intra x @stat2.init | x <- @stat1.finals]
                           in concat [@stat1.flow, @stat2.flow, extra]
  | Continue'   lhs.continueInits = [@label]

-- Blocks

sem Program'
  | Program'    lhs.blocks = @stat.blocks

sem Stat'
  | Skip'       lhs.blocks = [Left $ Skip' @label]
  | IfThenElse' lhs.blocks = [Right (@cond.copy, @labelc)] ++ @stat1.blocks ++ @stat2.blocks
  | While'      lhs.blocks = [Right (@cond.copy, @labelc)] ++ @stat.blocks
  | IAssign'    lhs.blocks = [Left $ IAssign' @label @name @val]
  | Call'       lhs.blocks = [] -- WUT
  | Seq'        lhs.blocks = @stat1.blocks ++ @stat2.blocks
  | BAssign'    lhs.blocks = [Left $ BAssign' @label @name @val]
  | Malloc'     lhs.blocks = [Left $ Malloc' @label @name @size]
  | RefAssign'  lhs.blocks = [Left $ RefAssign' @label @ptr @val]
  | Free'       lhs.blocks = [Left $ Free' @label @ptr]
  | Continue'   lhs.blocks = [Left $ Continue' @label]
  | Break'      lhs.blocks = [Left $ Break' @label]

--------------------------------------------------------------------------------
--                               4. Hulpfuncties                              --
--------------------------------------------------------------------------------

{
{- Labelgenerator. Deze functie verzorgt het genereren van verse
 - programmapunten, dat wordt ons volledig uit handen genomen door het AG
 - systeem.
 -
 - Let wel: Labels worden altijd gegenereerd, maar niet altijd gebruikt. Het kan
 - dus zijn dat de getallen 1 t/m 10 gegenereerd worden als labels maar dat
 - uiteindelijk alleen 3,4 en 5 gebruikt worden. Dan mist de rest dus, maar dat
 - maakt niet uit.
 -}
nextUnique :: Label -> (Label, Label)
nextUnique (Label x) = (Label (x + 1), Label x)

}
