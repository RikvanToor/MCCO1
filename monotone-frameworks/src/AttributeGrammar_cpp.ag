optpragmas
{
{-# LANGUAGE StandaloneDeriving #-}
}

#define PRETTY_PRINT 1

{
import Arc

}

data Program
  | Program   procs :: Procs
              stat  :: Stat
  deriving Program : Show

data Program'
  | Program'  procs :: Procs'
              stat  :: Stat'
#if PRETTY_PRINT != 1
deriving instance Show Program'
#endif

type Procs  = [ Proc  ]
type Procs' = [ Proc' ]
data Proc
  | Proc          name :: String  inp :: {[String]}  out :: String   stat :: Stat
  deriving Proc : Show

data Proc'
  | Proc'         labelEntry :: Label  labelReturn :: Label    name :: String  inp :: {[String]}  out :: String   stat :: Stat'
#if PRETTY_PRINT != 1
deriving instance Show Proc'
#endif

data Stat
  | Skip
  | IfThenElse    cond  :: {BExpr} stat1  :: Stat    stat2 :: Stat
  | While         cond  :: {BExpr} stat   :: Stat
  | Call          name  :: String  params :: {Exprs} out :: String
  | IAssign       name  :: String  val    :: {IExpr}
  | BAssign       name  :: String  val    :: {BExpr}
  | Seq           stat1 :: Stat    stat2  :: Stat
  | Malloc        name  :: String  size   :: {IExpr}
  | Free          ptr   :: {IExpr}
  | RefAssign     ptr   :: {IExpr} val    :: {IExpr}
  | Continue
  | Break
  deriving Stat : Show

data Stat'
  | Skip'          label     :: Label
  | IfThenElse'    labelc    :: Label   cond      :: BExpr   stat1  :: Stat'  stat2  :: Stat'
  | While'         labelc    :: Label   cond      :: BExpr   stat   :: Stat'
  | Call'          labelCall :: Label   labelExit :: Label     name   :: String params :: {Exprs}  out :: String
  | IAssign'       label     :: Label   name      :: String  val    :: IExpr
  | BAssign'       label     :: Label   name      :: String  val    :: BExpr
  | Seq'           stat1     :: Stat' stat2     :: Stat'
  | Malloc'        label     :: Label   name      :: String  size   :: IExpr
  | Free'          label     :: Label   ptr       :: IExpr
  | RefAssign'     label     :: Label   ptr       :: IExpr   val    :: IExpr
  | Continue'      label     :: Label
  | Break'         label     :: Label
{
#if PRETTY_PRINT != 1
deriving instance Show Stat'
#endif
}

data IExpr
  | IConst        val  :: Int
  | Var           name :: String
  | Plus          left :: IExpr  right :: IExpr
  | Minus         left :: IExpr  right :: IExpr
  | Times         left :: IExpr  right :: IExpr
  | Divide        left :: IExpr  right :: IExpr
  | Deref         ptr  :: IExpr
  deriving IExpr : Eq, Ord
{
#if PRETTY_PRINT != 1
deriving instance Show IExpr
#endif
}

data BExpr
  | BConst        val  :: Bool
  | BVar          name :: String
  | LessThan      left :: IExpr  right :: IExpr
  | GreaterThan   left :: IExpr  right :: IExpr
  | LessEqual     left :: IExpr  right :: IExpr
  | GreaterEqual  left :: IExpr  right :: IExpr
  | IEqual        left :: IExpr  right :: IExpr
  | BEqual        left :: BExpr  right :: BExpr
  | And           left :: BExpr  right :: BExpr
  | Or            left :: BExpr  right :: BExpr
  | Not           val  :: BExpr
  deriving BExpr : Eq, Ord
{
#if PRETTY_PRINT != 1
deriving instance Show BExpr
#endif
}

type Exprs  = [ Expr  ]
data Expr
  | B BExpr
  | I IExpr
  deriving Expr : Eq, Ord
{
#if PRETTY_PRINT != 1
deriving instance Show BExpr
#else
instance Show Expr where
  show (I expr) = show expr
  show (B expr) = show expr
#endif
}

data Code
  | CBExpr   BExpr
  | CIExpr   IExpr
  | CStat    Stat'
  | CProc    Proc'
  | CProgram Program'

--------------------------------------------------------------------------------
-- Lelijke instances, maar ze maken het wel mooi in de output                 --
--------------------------------------------------------------------------------
{
#if PRETTY_PRINT == 1
instance Show Stat' where
  show s =
    case s of
      Skip' label ->
        "[skip]" ++ show label
      IfThenElse' labelc cond  stat1 stat2 ->
        "[if " ++ show cond ++ "] " ++ show labelc ++ "\n" ++
        indentblock (show stat1) ++ "\nelse\n" ++ indentblock (show stat2)
      While' labelc cond stat ->
        "[while " ++ show cond ++ "] " ++ show labelc ++ "\n" ++
        indentblock (show stat) ++ "\n"
      IAssign' label name val ->
        "[" ++ name ++ " = " ++ show val ++ "] " ++ show label
      BAssign' label name val ->
        "[" ++ name ++ " = " ++ show val ++ "] " ++ show label
      Seq' stat1 stat2 ->
        show stat1 ++ ";\n" ++ show stat2
      Malloc' label name size ->
        "[malloc(" ++ name ++ ", " ++ show size ++ ")] " ++ show label
      Free' label ptr ->
        "[free(" ++ show ptr ++ ")]" ++ show label
      RefAssign' label ptr val ->
        "[refassign(" ++ show ptr ++ ") = " ++ show val ++ "] " ++ show label
      Continue' label ->
        "[continue] " ++ show label
      Break' label ->
        "[break] " ++ show label
      Call' labelCall labelExit name params out ->
        "[call " ++ name ++ "(" ++ concatMap ((++",") . show) params ++ out ++ ")]" ++ show labelCall ++ " " ++ show labelExit

instance Show Program' where
  show (Program' procs stat) = "Program':\n" ++ indentblock ((concatMap ((++"\n") . show) procs) ++ show stat)

instance Show Proc' where
  show (Proc' labelEntry labelReturn name inp out stat) = "proc " ++ name ++
      "(" ++ concatMap (++ ", ") inp ++ "res " ++ out ++ ") is" ++ show labelEntry
      ++ "\n" ++ indentblock (show stat) ++ "\nend " ++ show labelReturn ++ ";"

-- helper functie die vooraan elke regel twee spaties stopt.
indentblock :: String -> String
indentblock = init . unlines . fmap ("  "++) . lines

-- abstractie
infixop :: Show a => a -> String -> a -> String
infixop left inf right = show left ++ " " ++ inf ++ " " ++ show right

instance Show IExpr where
  show s =
    case s of
      IConst val        -> show val
      Var    name       -> name
      Plus   left right -> infixop left "+" right
      Minus  left right -> infixop left "-" right
      Times  left right -> infixop left "*" right
      Divide left right -> infixop left "/" right
      Deref  ptr        -> "dereference(" ++ show ptr ++ ")"

instance Show BExpr where
  show s =
    case s of
      BConst        val         -> show val
      BVar          name        -> name
      LessThan      left  right -> infixop left "<" right
      GreaterThan   left  right -> infixop left ">" right
      LessEqual     left  right -> infixop left "<=" right
      GreaterEqual  left  right -> infixop left ">=" right
      IEqual        left  right -> infixop left "==" right
      BEqual        left  right -> infixop left "==" right
      And           left  right -> infixop left "&&" right
      Or            left  right -> infixop left "||" right
      Not           val         -> "!(" ++ show val ++ ")"
#endif
}
--------------------------------------------------------------------------------
--                           2. Attribuutdeclaraties                          --
--------------------------------------------------------------------------------

{- label : Int
 -
 - Houdt de huidige beschikbare label-waarde. Dit betekent dus dat de georven
 - waarde altijd gebruikt kan worden, maar moet worden aangepast voordat deze
 - doorgegeven wordt aan de kinderen:
 -
 - vb.
 -
 -  Label 9 komt binnen
 -  Ik gebruik label 9 in een programmapunt
 -  De labelwaarde die ik door ga geven is 9 + 1 = 10.
 -
 - ---------------------------------------------------------------------------
 -
 - cfg : Graph
 -
 - 'Control flow graph' is een synthetisch attribuut op het hoogste niveau. Dit
 - kan triviaal gedaan worden met de verzameling kanten die de stroming
 - definieren: cfg : Set Edges -> Graph
 -
 -}
{

-- Type van het resultaat
type AGResult = (Exprs, Blocks, Flow, Finals, Init, Flow)

agResult_aexpr_star (x, _, _, _, _, _, _) = x
agResult_all_vars   (_, x, _, _, _, _, _) = x
agResult_blocks     (_, _, x, _, _, _, _) = x
agResult_cfg        (_, _, _, x, _, _, _) = x
agResult_finals     (_, _, _, _, x, _, _) = x
agResult_init       (_, _, _, _, _, x, _) = x
agResult_rcfg       (_, _, _, _, _, _, x) = x

newtype Label = Label { getLabel :: Int } deriving (Eq, Ord)

#if PRETTY_PRINT == 1
instance Show Label where
  show (Label x) = concat ["\ESC[93m\ESC[1m", show x, "\ESC[0m"]
#else
deriving instance Show Label
#endif
}

attr Procs Proc Stat
  chn label :: Label

attr Program
  syn transformed :: Program'

attr Proc Procs
  syn transformed use {(++)} {[]} :: Procs'

attr Stat
  syn transformed :: Stat'

attr Procs' Proc' Stat' BExpr IExpr
  syn copy :: self

attr Expr Exprs
  syn copy :: self

{- Alleen de types die een accent-versie hebben krijgen het transformed
 - attribuut omdat daar labels aan verbonden moeten worden.
 -}

{
type Init   = Label
type Finals = [Label]

type Flow   = Graph Label

data CallBlock = CallBlock String Exprs String
  deriving Show

data ProcBlock = ProcBlock String [String] String
  deriving Show

data Block'
  = Statement  Stat'
  | Boolean    BExpr
  | CallProc   CallBlock
  | ReturnProc CallBlock
  | IsProc     ProcBlock
  | EndProc    ProcBlock
  deriving Show

type Block  = (Label, Block')
type Blocks = [Block]
}


attr Program'
  syn cfg        :: {[Arc Label]}
  syn rcfg       :: {[Arc Label]}
  syn init       :: Init
  syn finals     :: Finals
  syn blocks     :: {[Block]}

attr Stat'
  syn blocks        use {(++)} {[]} :: {[Block]}
  syn breakFinals   use {(++)} {[]} :: Finals
  syn continueInits use {(++)} {[]} :: Finals
  syn finals        use {(++)} {[]} :: Finals
  syn flow          use {(++)} {[]} :: Flow
  syn init                          :: Init

attr Procs' Proc'
  syn blocks        use {(++)} {[]} :: {[Block]}
  syn flow          use {(++)} {[]} :: Flow

attr Procs' Proc' Stat'
  inh allProcs :: {Procs'}

attr Program' Stat' IExpr BExpr
  -- Deze zijn nodig als `universe' voor statische analyses als Available
  -- expressions en live variable analysis
  syn aexpr_star use {(++)} {[]} :: {Exprs}
  syn all_vars   use {(++)} {[]} :: {[String]}

--------------------------------------------------------------------------------
--                                3. Semantiek                                --
--------------------------------------------------------------------------------

-- Transformatie van Program naar Program' (Toevoegen van labels)
sem Program
  | Program
    lhs.transformed = Program' @procs.transformed @stat.transformed
    procs.label     = Label 1
    stat.label      = @procs.label

sem Proc
  | Proc
    loc.entry :: uniqueref label
       .exit  :: uniqueref label
    lhs.transformed =
     [(Proc' @loc.entry @loc.exit @name @inp @out @stat.transformed)]

sem Stat
  | Skip IfThenElse While Call IAssign BAssign Seq Malloc Free RefAssign
    Continue Break
    loc.nextLabel :: uniqueref label

sem Stat
  | Skip       lhs.transformed = Skip'       @loc.nextLabel
  | While      lhs.transformed = While'      @loc.nextLabel @cond @stat.transformed
  | IAssign    lhs.transformed = IAssign'    @loc.nextLabel @name @val
  | BAssign    lhs.transformed = BAssign'    @loc.nextLabel @name @val
  | Malloc     lhs.transformed = Malloc'     @loc.nextLabel @name @size
  | Free       lhs.transformed = Free'       @loc.nextLabel @ptr
  | RefAssign  lhs.transformed = RefAssign'  @loc.nextLabel @ptr @val
  | Continue   lhs.transformed = Continue'   @loc.nextLabel
  | Break      lhs.transformed = Break'      @loc.nextLabel
  | IfThenElse lhs.transformed = IfThenElse' @loc.nextLabel
                                  @cond @stat1.transformed @stat2.transformed
  | Seq        lhs.transformed = Seq' @stat1.transformed @stat2.transformed
  | Call       loc.call   :: uniqueref label
                  .return :: uniqueref label
               lhs.transformed = Call'       @loc.call @loc.return @name @params @out

-- Init

sem Program'
  | Program' lhs.init   = @stat.init

sem Stat'
  | Skip'       lhs.init = @label
  | IfThenElse' lhs.init = @labelc
  | While'      lhs.init = @labelc
  | Call'       lhs.init = @labelCall
  | IAssign'    lhs.init = @label
  | BAssign'    lhs.init = @label
  | Seq'        lhs.init = @stat1.init
  | Malloc'     lhs.init = @label
  | Free'       lhs.init = @label
  | RefAssign'  lhs.init = @label
  | Continue'   lhs.init = @label
  | Break'      lhs.init = @label

-- Finals

sem Program'
  | Program'    lhs.finals      = @stat.finals

sem Stat'
  | Skip'       lhs.finals      = [@label]
  | IfThenElse' lhs.finals      = @stat1.finals ++ @stat2.finals
  | While'      lhs.finals      = @labelc : @stat.breakFinals
                   .breakFinals = []
  | Call'       lhs.finals      = [@labelExit]
  | IAssign'    lhs.finals      = [@label]
  | BAssign'    lhs.finals      = [@label]
  | Seq'        lhs.finals      = @stat2.finals
  | Malloc'     lhs.finals      = [@label]
  | Free'       lhs.finals      = [@label]
  | RefAssign'  lhs.finals      = [@label]
  | Continue'   lhs.finals      = []
  | Break'      lhs.finals      = []
                   .breakFinals = [@label]

-- (Reverse) Control Flow Graph

sem Program'
  | Program'
    loc.c      = @stat.flow ++ @procs.flow
    lhs.cfg    = @loc.c
       .rcfg   = reverseGraph @loc.c

sem Proc'
  | Proc'       lhs.flow = (Intra @labelEntry @stat.init) : @stat.flow
                           ++ (map (flip Intra @labelReturn) @stat.finals)

sem Stat'
  | IfThenElse' lhs.flow = @stat1.flow ++  @stat2.flow ++
                           [Intra @labelc @stat1.init] ++ [Intra @labelc @stat2.init]
  | While'      lhs.flow = let extra = [Intra x @labelc | x <- @stat.finals] ++
                                       [Intra x @labelc | x <- @stat.continueInits]
                           in concat [@stat.flow, [Intra @labelc @stat.init], extra]
                lhs.continueInits = []
  | Call'       lhs.flow = case lookup @name $
                           map (\(Proc' l1 l2 n _ _ _) -> (n,(l1,l2))) @lhs.allProcs of
                              Nothing -> [Intra @labelCall @labelExit]
                              Just (l1,l2) -> [Inter @labelCall l1 l2 @labelExit]
  | Seq'        lhs.flow = let extra = [Intra x @stat2.init | x <- @stat1.finals]
                           in concat [@stat1.flow, @stat2.flow, extra]
  | Continue'   lhs.continueInits = [@label]

-- Blocks

sem Program'
  | Program'    lhs.blocks = @procs.blocks ++ @stat.blocks

sem Stat'
  | Skip'       lhs.blocks = [(@label, Statement $ Skip' @label)]
  | IfThenElse' lhs.blocks = [(@labelc, Boolean @cond.copy)] ++ @stat1.blocks ++ @stat2.blocks
  | While'      lhs.blocks = [(@labelc, Boolean @cond.copy)] ++ @stat.blocks
  | IAssign'    lhs.blocks = [(@label, Statement @copy)]
  | Call'       lhs.blocks = let block = CallBlock @name @params @out in
                              [(@labelCall, CallProc block), (@labelExit, ReturnProc block)]
  | Seq'        lhs.blocks = @stat1.blocks ++ @stat2.blocks
  | BAssign'    lhs.blocks = [(@label, Statement @copy)]
  | Malloc'     lhs.blocks = [(@label, Statement @copy)]
  | RefAssign'  lhs.blocks = [(@label, Statement @copy)]
  | Free'       lhs.blocks = [(@label, Statement @copy)]
  | Continue'   lhs.blocks = [(@label, Statement @copy)]
  | Break'      lhs.blocks = [(@label, Statement @copy)]

sem Proc'
  | Proc'       lhs.blocks = let block = ProcBlock @name @inp @out in
                              [(@labelEntry, IsProc block), (@labelReturn, EndProc block)] ++ @stat.blocks

-- All Procs

sem Program'
  | Program'    procs.allProcs = @procs.copy
                stat.allProcs  = @procs.copy

sem Procs'
  | Cons        hd.allProcs  = @lhs.allProcs
                tl.allProcs  = @lhs.allProcs

sem Proc'
  | Proc'       stat.allProcs = @lhs.allProcs

sem Stat'
  | Seq'        stat1.allProcs = @lhs.allProcs
                stat2.allProcs = @lhs.allProcs
  | IfThenElse' stat1.allProcs = @lhs.allProcs
                stat2.allProcs = @lhs.allProcs
  | While'      stat.allProcs  = @lhs.allProcs

--------------------------------------------------------------------------------
--                               4. Hulpfuncties                              --
--------------------------------------------------------------------------------

{
{- Labelgenerator. Deze functie verzorgt het genereren van verse
 - programmapunten, dat wordt ons volledig uit handen genomen door het AG
 - systeem.
 -
 - Let wel: Labels worden altijd gegenereerd, maar niet altijd gebruikt. Het kan
 - dus zijn dat de getallen 1 t/m 10 gegenereerd worden als labels maar dat
 - uiteindelijk alleen 3,4 en 5 gebruikt worden. Dan mist de rest dus, maar dat
 - maakt niet uit.
 -}
nextUnique :: Label -> (Label, Label)
nextUnique (Label x) = (Label (x + 1), Label x)

-- Alle variabelen in een expressie
variables :: Expr -> [String]
variables (I e) =
  case e of
    IConst _ -> []
    Var name -> [name]
    Plus   l r -> variables (I l) ++ variables (I r)
    Minus  l r -> variables (I l) ++ variables (I r)
    Times  l r -> variables (I l) ++ variables (I r)
    Divide l r -> variables (I l) ++ variables (I r)
    Deref  ptr -> variables (I ptr)
variables (B e) =
  case e of
    BConst _  -> []
    BVar name -> [name]
    LessThan     l r -> variables (I l) ++ variables (I r)
    GreaterThan  l r -> variables (I l) ++ variables (I r)
    LessEqual    l r -> variables (I l) ++ variables (I r)
    GreaterEqual l r -> variables (I l) ++ variables (I r)
    IEqual       l r -> variables (I l) ++ variables (I r)
    BEqual       l r -> variables (B l) ++ variables (B r)
    And          l r -> variables (B l) ++ variables (B r)
    Or           l r -> variables (B l) ++ variables (B r)
    Not val -> variables (B val)

-- Vrije variabelen

-- Controleert of een variabele @v@ vrij is in @expr@. Dat is het geval desda v
-- niet genoemd wordt in een van de variabelen in @expr@. Als hij wel genoemd
-- wordt dan is hij niet vrij.
freeIn, notFreeIn :: String -> Expr -> Bool
freeIn    v expr = not (notFreeIn v expr)
notFreeIn v expr = v `elem` (variables expr)


-- Alle (syntax gestuurde) sub-expressies in een expressie.
expressions :: Expr -> [Expr]
expressions (I e) =
  case e of
    IConst _ -> []
    Var _    -> []
    Plus   l r -> concat [[I (Plus   l r)], expressions (I l), expressions (I r)]
    Minus  l r -> concat [[I (Minus  l r)], expressions (I l), expressions (I r)]
    Times  l r -> concat [[I (Times  l r)], expressions (I l), expressions (I r)]
    Divide l r -> concat [[I (Divide l r)], expressions (I l), expressions (I r)]
    Deref  ptr -> expressions (I ptr)
expressions (B e) =
  case e of
    BConst _  -> []
    BVar _    -> []
    LessThan     l r -> concat [[B (LessThan     l r)], expressions (I l), expressions (I r)]
    GreaterThan  l r -> concat [[B (GreaterThan  l r)], expressions (I l), expressions (I r)]
    LessEqual    l r -> concat [[B (LessEqual    l r)], expressions (I l), expressions (I r)]
    GreaterEqual l r -> concat [[B (GreaterEqual l r)], expressions (I l), expressions (I r)]
    IEqual       l r -> concat [[B (IEqual       l r)], expressions (I l), expressions (I r)]
    BEqual       l r -> concat [[B (BEqual       l r)], expressions (B l), expressions (B r)]
    And          l r -> concat [[B (And          l r)], expressions (B l), expressions (B r)]
    Or           l r -> concat [[B (Or           l r)], expressions (B l), expressions (B r)]
    Not val -> expressions (B val)

statExpressions :: Stat' -> [Expr]
statExpressions e =
  case e of
    Skip' _ -> []
    IfThenElse'  _ cond stat1 stat2 ->
      expressions (B cond) ++ concatMap statExpressions [stat1, stat2]
    While' _ cond stat ->
      expressions (B cond) ++ (statExpressions stat)
    Call' _ _ _ _ _    -> [] -- TODO(?): Inter
    IAssign' _ _ val   -> expressions (I val)
    BAssign' _ _ val   -> expressions (B val)
    Seq' l r           -> concatMap statExpressions [l, r]
    Malloc' _ _ size   -> expressions (I size)
    Free' _ ptr        -> expressions (I ptr)
    RefAssign' _ ptr val -> concatMap expressions [I ptr, I val]
    Continue' _        -> []
    Break'    _        -> []

}

--------------------------------------------------------------------------------
--                               5. Hulpcatas                                 --
--------------------------------------------------------------------------------

-- Alle expressies in het programma
sem IExpr
  | Plus
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | Minus
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | Times
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | Divide
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | Deref
    lhs.aexpr_star =
      expressions (I @ptr.copy)

sem BExpr
  | LessThan
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | GreaterThan
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | LessEqual
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | GreaterEqual
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | IEqual
    lhs.aexpr_star =
      expressions (I @left.copy) ++ expressions (I @right.copy)
  | BEqual
    lhs.aexpr_star =
      expressions (B @left.copy) ++ expressions (B @right.copy)
  | And
    lhs.aexpr_star =
      expressions (B @left.copy) ++ expressions (B @right.copy)
  | Or
    lhs.aexpr_star =
      expressions (B @left.copy) ++ expressions (B @right.copy)
  | Not
    lhs.aexpr_star =
      expressions (B @val.copy)

-- Alle variabelen in het programma
sem IExpr
  | Plus
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | Minus
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | Times
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | Divide
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | Deref
    lhs.all_vars =
      variables (I @ptr.copy)

sem BExpr
  | LessThan
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | GreaterThan
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | LessEqual
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | GreaterEqual
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | IEqual
    lhs.all_vars =
      variables (I @left.copy) ++ variables (I @right.copy)
  | BEqual
    lhs.all_vars =
      variables (B @left.copy) ++ variables (B @right.copy)
  | And
    lhs.all_vars =
      variables (B @left.copy) ++ variables (B @right.copy)
  | Or
    lhs.all_vars =
      variables (B @left.copy) ++ variables (B @right.copy)
  | Not
    lhs.all_vars =
      variables (B @val.copy)
